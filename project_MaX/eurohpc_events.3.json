[{"@context": "https://schema.org", "@graph": [{"@type": "Event", "name": "Integration of ESL modules into electronic-structure codes", "url": "http://www.max-centre.eu/news-events/integration-esl-modules-electronic-structure-codes-0", "description": "The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms, new kinds of users, new processes, and new tools. Electronic structure software complexity is consequently also increasing, requiring a larger effort on code maintenance. Developers of large electronic structure codes are trying to relieve some complexity by transitioning standardized algorithms into separate libraries [BigDFT-PSolver, ELPA, ELSI, LibXC, LibGridXC, etc.]. This paradigm shift requires library developers to have a hybrid developer profile where the scientific and computational skill set becomes equally important. These topics have been extensively and publicly discussed between developers of various projects including ABINIT, ASE, ATK, BigDFT, CASTEP, FHI-aims, GPAW, Octopus, Quantum Espresso, SIESTA, and SPR-KKR.\n\nHigh-quality standardized libraries are not only a highly challenging effort lying at the hands of the library developers, they also open possibilities for codes to take advantage of a standard way to access commonly used algorithms. Integration of these libraries, however, requires a significant initial effort that is often sacrificed for new developments that often not even reach the mainstream branch of the code. Additionally, there are multiple challenges in adopting new libraries which have their roots in a variety of issues: installation, data structures, physical units and parallelism - all of which are code-dependent. On the other hand, adoption of common libraries ensures the immediate propagation of improvements within the respective library\u2019s field of research and ensures codes are up-to-date with much less effort [LibXC]. Indeed, well-established libraries can have a huge impact on multiple scientific communities at once [PETSc].\n\nIn the Electronic Structure community, two issues are emerging. Libraries are being developed [esl, esl-gitlab] but require an ongoing commitment from the community with respect to sharing the maintenance and development effort. Secondly, existing codes will benefit from libraries by adopting their use. Both issues are mainly governed by the exposure of the libraries and the availability of library core developers, which are typically researchers pressured by publication deliverables and fund-raising burdens. They are thus not able to commit a large fraction of their time to software development.\n\nAn effort to allow code developers to make use of, and develop, shared components is needed. This requires an efficient coordination between various elements:\n\nA common and consistent code development infrastructure/education in terms of compilation, installation, testing and documentation.  \n\\- How to use and integrate already published libraries into existing projects.  \n\\- Creating long-lasting synergies between developers to reach a \u201ccritical mass\u201d of component contributors.  \n\\- Relevant quality metrics (\"TRLs\" and \u201cSRLs\u201d), to provide businesses with useful information .\n\nThis is what the Electronic Structure Library (ESL)[esl, esl-gitlab] has been doing since 2014, with a wiki, a data-exchange standard, refactoring code of global interest into integrated modules, and regularly organizing workshops, within a wider movement lead by the European eXtreme Data and Computing Initiative [exdci].\n\nReferences\n\n[BigDFT-PSolver] http://bigdft.org/Wiki/index.php?title=The_Solver_Package  \n[ELPA] https://gitlab.mpcdf.mgp.de/elpa/elpa  \n[ELSI] http://elsi-interchange.org  \n[LibXC] http://www.tddft.org/programs/libxc/  \n[LibGridXC] https://launchpad.net/libgridxc  \n[PETSc] https://www.mcs.anl.gov/petsc/  \n[esl] http://esl.cecam.org/  \n[esl-gitlab] http://gitlab.e-cam2020.eu/esl  \n[exdci] https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strate...", "eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode", "eventStatus": "https://schema.org/EventScheduled", "image": {"@type": "ImageObject", "representativeOfPage": "True", "url": "images/FocusCoE_placeholder.webp", "width": 720, "height": 231}, "doorTime": "2020-02-17T09:00:00+0100", "startDate": "2020-02-17T09:00:00+0100", "endDate": "2020-02-18T17:00:00+0100", "@id": "https://hpc-portal.eu/node/1376", "isAccessibleForFree": "True", "location": {"@type": "VirtualLocation", "url": "http://www.max-centre.eu/news-events/integration-esl-modules-electronic-structure-codes-0", "geo": {"@type": "GeoCoordinates", "latitude": "46.5201508", "longitude": "6.5722361"}}, "language": ["English"], "sector": ["Research and Academia", "Industry"], "country": ["Switzerland"], "projects": ["MaX"], "level": ["Beginner", "Intermediate", "Advanced"], "html_description": "<p>The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms, new kinds of users, new processes, and new tools. Electronic structure software complexity is consequently also increasing, requiring a larger effort on code maintenance. Developers of large electronic structure codes are trying to relieve some complexity by transitioning standardized algorithms into separate libraries [BigDFT-PSolver, ELPA, ELSI, LibXC, LibGridXC, etc.]. This paradigm shift requires library developers to have a hybrid developer profile where the scientific and computational skill set becomes equally important. These topics have been extensively and publicly discussed between developers of various projects including ABINIT, ASE, ATK, BigDFT, CASTEP, FHI-aims, GPAW, Octopus, Quantum Espresso, SIESTA, and SPR-KKR.</p> <p>High-quality standardized libraries are not only a highly challenging effort lying at the hands of the library developers, they also open possibilities for codes to take advantage of a standard way to access commonly used algorithms. Integration of these libraries, however, requires a significant initial effort that is often sacrificed for new developments that often not even reach the mainstream branch of the code. Additionally, there are multiple challenges in adopting new libraries which have their roots in a variety of issues: installation, data structures, physical units and parallelism - all of which are code-dependent. On the other hand, adoption of common libraries ensures the immediate propagation of improvements within the respective library\u2019s field of research and ensures codes are up-to-date with much less effort [LibXC]. Indeed, well-established libraries can have a huge impact on multiple scientific communities at once [PETSc].</p> <p>In the Electronic Structure community, two issues are emerging. Libraries are being developed [esl, esl-gitlab] but require an ongoing commitment from the community with respect to sharing the maintenance and development effort. Secondly, existing codes will benefit from libraries by adopting their use. Both issues are mainly governed by the exposure of the libraries and the availability of library core developers, which are typically researchers pressured by publication deliverables and fund-raising burdens. They are thus not able to commit a large fraction of their time to software development.</p> <p>An effort to allow code developers to make use of, and develop, shared components is needed. This requires an efficient coordination between various elements:</p> <p>A common and consistent code development infrastructure/education in terms of compilation, installation, testing and documentation.<br> - How to use and integrate already published libraries into existing projects.<br> - Creating long-lasting synergies between developers to reach a \u201ccritical mass\u201d of component contributors.<br> - Relevant quality metrics (\"TRLs\" and \u201cSRLs\u201d), to provide businesses with useful information .</p> <p>This is what the Electronic Structure Library (ESL)[esl, esl-gitlab] has been doing since 2014, with a wiki, a data-exchange standard, refactoring code of global interest into integrated modules, and regularly organizing workshops, within a wider movement lead by the European eXtreme Data and Computing Initiative [exdci].</p> <p>References</p> <p>[BigDFT-PSolver] <a href=\"http://bigdft.org/Wiki/index.php?title=The_Solver_Package\">http://bigdft.org/Wiki/index.php?title=The_Solver_Package</a><br> [ELPA] <a href=\"https://gitlab.mpcdf.mgp.de/elpa/elpa\">https://gitlab.mpcdf.mgp.de/elpa/elpa</a><br> [ELSI] <a href=\"http://elsi-interchange.org/\">http://elsi-interchange.org</a><br> [LibXC] <a href=\"http://www.tddft.org/programs/libxc/\">http://www.tddft.org/programs/libxc/</a><br> [LibGridXC] <a href=\"https://launchpad.net/libgridxc\">https://launchpad.net/libgridxc</a><br> [PETSc] <a href=\"https://www.mcs.anl.gov/petsc/\">https://www.mcs.anl.gov/petsc/</a><br> [esl] <a href=\"http://esl.cecam.org/\">http://esl.cecam.org/</a><br> [esl-gitlab] <a href=\"http://gitlab.e-cam2020.eu/esl\">http://gitlab.e-cam2020.eu/esl</a><br> [exdci] <a href=\"https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strategy-europe\">https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strate...</a></p>", "markdown_description": "The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms, new kinds of users, new processes, and new tools. Electronic structure software complexity is consequently also increasing, requiring a larger effort on code maintenance. Developers of large electronic structure codes are trying to relieve some complexity by transitioning standardized algorithms into separate libraries [BigDFT-PSolver, ELPA, ELSI, LibXC, LibGridXC, etc.]. This paradigm shift requires library developers to have a hybrid developer profile where the scientific and computational skill set becomes equally important. These topics have been extensively and publicly discussed between developers of various projects including ABINIT, ASE, ATK, BigDFT, CASTEP, FHI-aims, GPAW, Octopus, Quantum Espresso, SIESTA, and SPR-KKR.\n\nHigh-quality standardized libraries are not only a highly challenging effort lying at the hands of the library developers, they also open possibilities for codes to take advantage of a standard way to access commonly used algorithms. Integration of these libraries, however, requires a significant initial effort that is often sacrificed for new developments that often not even reach the mainstream branch of the code. Additionally, there are multiple challenges in adopting new libraries which have their roots in a variety of issues: installation, data structures, physical units and parallelism - all of which are code-dependent. On the other hand, adoption of common libraries ensures the immediate propagation of improvements within the respective library\u2019s field of research and ensures codes are up-to-date with much less effort [LibXC]. Indeed, well-established libraries can have a huge impact on multiple scientific communities at once [PETSc].\n\nIn the Electronic Structure community, two issues are emerging. Libraries are being developed [esl, esl-gitlab] but require an ongoing commitment from the community with respect to sharing the maintenance and development effort. Secondly, existing codes will benefit from libraries by adopting their use. Both issues are mainly governed by the exposure of the libraries and the availability of library core developers, which are typically researchers pressured by publication deliverables and fund-raising burdens. They are thus not able to commit a large fraction of their time to software development.\n\nAn effort to allow code developers to make use of, and develop, shared components is needed. This requires an efficient coordination between various elements:\n\nA common and consistent code development infrastructure/education in terms of compilation, installation, testing and documentation.  \n\\- How to use and integrate already published libraries into existing projects.  \n\\- Creating long-lasting synergies between developers to reach a \u201ccritical mass\u201d of component contributors.  \n\\- Relevant quality metrics (\"TRLs\" and \u201cSRLs\u201d), to provide businesses with useful information .\n\nThis is what the Electronic Structure Library (ESL)[esl, esl-gitlab] has been doing since 2014, with a wiki, a data-exchange standard, refactoring code of global interest into integrated modules, and regularly organizing workshops, within a wider movement lead by the European eXtreme Data and Computing Initiative [exdci].\n\nReferences\n\n[BigDFT-PSolver] <http://bigdft.org/Wiki/index.php?title=The_Solver_Package>  \n[ELPA] <https://gitlab.mpcdf.mgp.de/elpa/elpa>  \n[ELSI] [http://elsi-interchange.org](http://elsi-interchange.org/)  \n[LibXC] <http://www.tddft.org/programs/libxc/>  \n[LibGridXC] <https://launchpad.net/libgridxc>  \n[PETSc] <https://www.mcs.anl.gov/petsc/>  \n[esl] <http://esl.cecam.org/>  \n[esl-gitlab] <http://gitlab.e-cam2020.eu/esl>  \n[exdci] [https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strate...](https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strategy-europe)", "summary": "The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms,..."}]}]