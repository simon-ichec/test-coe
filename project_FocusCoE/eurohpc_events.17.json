[{"@context": "https://schema.org", "@graph": [{"@type": "Event", "name": "Integration of ESL modules into electronic-structure codes", "url": "http://www.max-centre.eu/news-events/integration-esl-modules-electronic-structure-codes-0", "description": "The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms, new kinds of users, new processes, and new tools. Electronic structure software complexity is consequently also increasing, requiring a larger effort on code maintenance. Developers of large electronic structure codes are trying to relieve some complexity by transitioning standardized algorithms into separate libraries [BigDFT-PSolver, ELPA, ELSI, LibXC, LibGridXC, etc.]. This paradigm shift requires library developers to have a hybrid developer profile where the scientific and computational skill set becomes equally important. These topics have been extensively and publicly discussed between developers of various projects including ABINIT, ASE, ATK, BigDFT, CASTEP, FHI-aims, GPAW, Octopus, Quantum Espresso, SIESTA, and SPR-KKR.\n\nHigh-quality standardized libraries are not only a highly challenging effort lying at the hands of the library developers, they also open possibilities for codes to take advantage of a standard way to access commonly used algorithms. Integration of these libraries, however, requires a significant initial effort that is often sacrificed for new developments that often not even reach the mainstream branch of the code. Additionally, there are multiple challenges in adopting new libraries which have their roots in a variety of issues: installation, data structures, physical units and parallelism - all of which are code-dependent. On the other hand, adoption of common libraries ensures the immediate propagation of improvements within the respective library\u2019s field of research and ensures codes are up-to-date with much less effort [LibXC]. Indeed, well-established libraries can have a huge impact on multiple scientific communities at once [PETSc].\n\nIn the Electronic Structure community, two issues are emerging. Libraries are being developed [esl, esl-gitlab] but require an ongoing commitment from the community with respect to sharing the maintenance and development effort. Secondly, existing codes will benefit from libraries by adopting their use. Both issues are mainly governed by the exposure of the libraries and the availability of library core developers, which are typically researchers pressured by publication deliverables and fund-raising burdens. They are thus not able to commit a large fraction of their time to software development.\n\nAn effort to allow code developers to make use of, and develop, shared components is needed. This requires an efficient coordination between various elements:\n\nA common and consistent code development infrastructure/education in terms of compilation, installation, testing and documentation.  \n\\- How to use and integrate already published libraries into existing projects.  \n\\- Creating long-lasting synergies between developers to reach a \u201ccritical mass\u201d of component contributors.  \n\\- Relevant quality metrics (\"TRLs\" and \u201cSRLs\u201d), to provide businesses with useful information .\n\nThis is what the Electronic Structure Library (ESL)[esl, esl-gitlab] has been doing since 2014, with a wiki, a data-exchange standard, refactoring code of global interest into integrated modules, and regularly organizing workshops, within a wider movement lead by the European eXtreme Data and Computing Initiative [exdci].\n\nReferences\n\n[BigDFT-PSolver] http://bigdft.org/Wiki/index.php?title=The_Solver_Package  \n[ELPA] https://gitlab.mpcdf.mgp.de/elpa/elpa  \n[ELSI] http://elsi-interchange.org  \n[LibXC] http://www.tddft.org/programs/libxc/  \n[LibGridXC] https://launchpad.net/libgridxc  \n[PETSc] https://www.mcs.anl.gov/petsc/  \n[esl] http://esl.cecam.org/  \n[esl-gitlab] http://gitlab.e-cam2020.eu/esl  \n[exdci] https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strate...", "eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode", "eventStatus": "https://schema.org/EventScheduled", "image": {"@type": "ImageObject", "representativeOfPage": "True", "url": "images/FocusCoE_placeholder.webp", "width": 720, "height": 231}, "doorTime": "2020-02-17T09:00:00+0100", "startDate": "2020-02-17T09:00:00+0100", "endDate": "2020-02-18T17:00:00+0100", "@id": "https://hpc-portal.eu/node/1376", "isAccessibleForFree": "True", "location": {"@type": "VirtualLocation", "url": "http://www.max-centre.eu/news-events/integration-esl-modules-electronic-structure-codes-0", "geo": {"@type": "GeoCoordinates", "latitude": "46.5201508", "longitude": "6.5722361"}}, "language": ["English"], "sector": ["Research and Academia", "Industry"], "country": ["Switzerland"], "projects": ["MaX"], "level": ["Beginner", "Intermediate", "Advanced"], "html_description": "<p>The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms, new kinds of users, new processes, and new tools. Electronic structure software complexity is consequently also increasing, requiring a larger effort on code maintenance. Developers of large electronic structure codes are trying to relieve some complexity by transitioning standardized algorithms into separate libraries [BigDFT-PSolver, ELPA, ELSI, LibXC, LibGridXC, etc.]. This paradigm shift requires library developers to have a hybrid developer profile where the scientific and computational skill set becomes equally important. These topics have been extensively and publicly discussed between developers of various projects including ABINIT, ASE, ATK, BigDFT, CASTEP, FHI-aims, GPAW, Octopus, Quantum Espresso, SIESTA, and SPR-KKR.</p> <p>High-quality standardized libraries are not only a highly challenging effort lying at the hands of the library developers, they also open possibilities for codes to take advantage of a standard way to access commonly used algorithms. Integration of these libraries, however, requires a significant initial effort that is often sacrificed for new developments that often not even reach the mainstream branch of the code. Additionally, there are multiple challenges in adopting new libraries which have their roots in a variety of issues: installation, data structures, physical units and parallelism - all of which are code-dependent. On the other hand, adoption of common libraries ensures the immediate propagation of improvements within the respective library\u2019s field of research and ensures codes are up-to-date with much less effort [LibXC]. Indeed, well-established libraries can have a huge impact on multiple scientific communities at once [PETSc].</p> <p>In the Electronic Structure community, two issues are emerging. Libraries are being developed [esl, esl-gitlab] but require an ongoing commitment from the community with respect to sharing the maintenance and development effort. Secondly, existing codes will benefit from libraries by adopting their use. Both issues are mainly governed by the exposure of the libraries and the availability of library core developers, which are typically researchers pressured by publication deliverables and fund-raising burdens. They are thus not able to commit a large fraction of their time to software development.</p> <p>An effort to allow code developers to make use of, and develop, shared components is needed. This requires an efficient coordination between various elements:</p> <p>A common and consistent code development infrastructure/education in terms of compilation, installation, testing and documentation.<br> - How to use and integrate already published libraries into existing projects.<br> - Creating long-lasting synergies between developers to reach a \u201ccritical mass\u201d of component contributors.<br> - Relevant quality metrics (\"TRLs\" and \u201cSRLs\u201d), to provide businesses with useful information .</p> <p>This is what the Electronic Structure Library (ESL)[esl, esl-gitlab] has been doing since 2014, with a wiki, a data-exchange standard, refactoring code of global interest into integrated modules, and regularly organizing workshops, within a wider movement lead by the European eXtreme Data and Computing Initiative [exdci].</p> <p>References</p> <p>[BigDFT-PSolver] <a href=\"http://bigdft.org/Wiki/index.php?title=The_Solver_Package\">http://bigdft.org/Wiki/index.php?title=The_Solver_Package</a><br> [ELPA] <a href=\"https://gitlab.mpcdf.mgp.de/elpa/elpa\">https://gitlab.mpcdf.mgp.de/elpa/elpa</a><br> [ELSI] <a href=\"http://elsi-interchange.org/\">http://elsi-interchange.org</a><br> [LibXC] <a href=\"http://www.tddft.org/programs/libxc/\">http://www.tddft.org/programs/libxc/</a><br> [LibGridXC] <a href=\"https://launchpad.net/libgridxc\">https://launchpad.net/libgridxc</a><br> [PETSc] <a href=\"https://www.mcs.anl.gov/petsc/\">https://www.mcs.anl.gov/petsc/</a><br> [esl] <a href=\"http://esl.cecam.org/\">http://esl.cecam.org/</a><br> [esl-gitlab] <a href=\"http://gitlab.e-cam2020.eu/esl\">http://gitlab.e-cam2020.eu/esl</a><br> [exdci] <a href=\"https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strategy-europe\">https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strate...</a></p>", "markdown_description": "The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms, new kinds of users, new processes, and new tools. Electronic structure software complexity is consequently also increasing, requiring a larger effort on code maintenance. Developers of large electronic structure codes are trying to relieve some complexity by transitioning standardized algorithms into separate libraries [BigDFT-PSolver, ELPA, ELSI, LibXC, LibGridXC, etc.]. This paradigm shift requires library developers to have a hybrid developer profile where the scientific and computational skill set becomes equally important. These topics have been extensively and publicly discussed between developers of various projects including ABINIT, ASE, ATK, BigDFT, CASTEP, FHI-aims, GPAW, Octopus, Quantum Espresso, SIESTA, and SPR-KKR.\n\nHigh-quality standardized libraries are not only a highly challenging effort lying at the hands of the library developers, they also open possibilities for codes to take advantage of a standard way to access commonly used algorithms. Integration of these libraries, however, requires a significant initial effort that is often sacrificed for new developments that often not even reach the mainstream branch of the code. Additionally, there are multiple challenges in adopting new libraries which have their roots in a variety of issues: installation, data structures, physical units and parallelism - all of which are code-dependent. On the other hand, adoption of common libraries ensures the immediate propagation of improvements within the respective library\u2019s field of research and ensures codes are up-to-date with much less effort [LibXC]. Indeed, well-established libraries can have a huge impact on multiple scientific communities at once [PETSc].\n\nIn the Electronic Structure community, two issues are emerging. Libraries are being developed [esl, esl-gitlab] but require an ongoing commitment from the community with respect to sharing the maintenance and development effort. Secondly, existing codes will benefit from libraries by adopting their use. Both issues are mainly governed by the exposure of the libraries and the availability of library core developers, which are typically researchers pressured by publication deliverables and fund-raising burdens. They are thus not able to commit a large fraction of their time to software development.\n\nAn effort to allow code developers to make use of, and develop, shared components is needed. This requires an efficient coordination between various elements:\n\nA common and consistent code development infrastructure/education in terms of compilation, installation, testing and documentation.  \n\\- How to use and integrate already published libraries into existing projects.  \n\\- Creating long-lasting synergies between developers to reach a \u201ccritical mass\u201d of component contributors.  \n\\- Relevant quality metrics (\"TRLs\" and \u201cSRLs\u201d), to provide businesses with useful information .\n\nThis is what the Electronic Structure Library (ESL)[esl, esl-gitlab] has been doing since 2014, with a wiki, a data-exchange standard, refactoring code of global interest into integrated modules, and regularly organizing workshops, within a wider movement lead by the European eXtreme Data and Computing Initiative [exdci].\n\nReferences\n\n[BigDFT-PSolver] <http://bigdft.org/Wiki/index.php?title=The_Solver_Package>  \n[ELPA] <https://gitlab.mpcdf.mgp.de/elpa/elpa>  \n[ELSI] [http://elsi-interchange.org](http://elsi-interchange.org/)  \n[LibXC] <http://www.tddft.org/programs/libxc/>  \n[LibGridXC] <https://launchpad.net/libgridxc>  \n[PETSc] <https://www.mcs.anl.gov/petsc/>  \n[esl] <http://esl.cecam.org/>  \n[esl-gitlab] <http://gitlab.e-cam2020.eu/esl>  \n[exdci] [https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strate...](https://exdci.eu/newsroom/press-releases/exdci-towards-common-hpc-strategy-europe)", "summary": "The evolutionary pressure on electronic structure software development is greatly increasing, due to the emergence of new paradigms,..."}]}, {"@context": "https://schema.org", "@graph": [{"@type": "Event", "name": "PATC: Short course on HPC-based Computational Bio-Medicine", "url": "https://events.prace-ri.eu/event/912/", "description": "## Objectives\n\nThe objetive of this course is to give a panorama on the use of hpc-based computational mechanics in Engineering and Environment through the projects BSC are carrying on. This panorama includes the basics of what is behind the main tools: computational mechanics and parallelization. The training is delivered in collaboration with the center of excellence CompBioMed.\n\n## Learning Outcomes\n\nThe course gives a wide perspective and the latest trends of how HPC helps in industrial, clinical and research applications allowing to achieve more realistic multiphysics simulations. In addition, the student has the opportunity of running Jobs in Marenostrum supercomputer.", "eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode", "eventStatus": "https://schema.org/EventScheduled", "image": {"@type": "ImageObject", "representativeOfPage": "True", "url": "images/FocusCoE_placeholder.webp", "width": 720, "height": 231}, "doorTime": "2020-02-11T09:00:00+0100", "startDate": "2020-02-11T09:00:00+0100", "endDate": "2020-02-13T17:00:00+0100", "@id": "https://hpc-portal.eu/node/1484", "isAccessibleForFree": "True", "location": {"@type": "VirtualLocation", "url": "https://events.prace-ri.eu/event/912/", "geo": {"@type": "GeoCoordinates", "latitude": "41.389776101375", "longitude": "2.1160718"}}, "language": ["English"], "sector": ["Research and Academia", "Industry", "Public Sector"], "country": ["Spain"], "projects": ["PRACE", "CompBioMed", "PerMedCoE"], "level": ["Intermediate", "Advanced"], "html_description": "<h2>Objectives</h2> <p>The objetive of this course is to give a panorama on the use of hpc-based computational mechanics in Engineering and Environment through the projects BSC are carrying on. This panorama includes the basics of what is behind the main tools: computational mechanics and parallelization. The training is delivered in collaboration with the center of excellence CompBioMed.</p> <h2>Learning Outcomes</h2> <p>The course gives a wide perspective and the latest trends of how HPC helps in industrial, clinical and research applications allowing to achieve more realistic multiphysics simulations. In addition, the student has the opportunity of running Jobs in Marenostrum supercomputer.</p>", "markdown_description": "## Objectives\n\nThe objetive of this course is to give a panorama on the use of hpc-based computational mechanics in Engineering and Environment through the projects BSC are carrying on. This panorama includes the basics of what is behind the main tools: computational mechanics and parallelization. The training is delivered in collaboration with the center of excellence CompBioMed.\n\n## Learning Outcomes\n\nThe course gives a wide perspective and the latest trends of how HPC helps in industrial, clinical and research applications allowing to achieve more realistic multiphysics simulations. In addition, the student has the opportunity of running Jobs in Marenostrum supercomputer.", "summary": "## Objectives\n\nThe objetive of this course is to give a panorama on the use of hpc-based computational mechanics in Engineering and..."}]}, {"@context": "https://schema.org", "@graph": [{"@type": "Event", "name": "Computational biomolecular simulation workflows with BioExcel building blocks", "url": "https://bioexcel.eu/events/computational-biomolecular-simulation-workflows-with-bioexcel-building-blocks/", "description": "**Overview**\n\nAre you interested in computational biomolecular simulation methods such as Molecular Dynamics simulations, but scared to make the first step? What if you could start smoothly using interactive, graphical user interfaces like Jupyter Notebooks? What if you could easily build pipelines chaining different programs using a single, interoperable library with a unique syntax?\n\nJoin the online training session where we will introduce the BioExcel building blocks, a fully interoperable software library comprising a collection of Python wrappers on top of biomolecular simulation tools such as GROMACS, Ambertools, Openbabel or ACPYPE. The philosophy behind its design, following best practices and FAIR principles for software development makes it easy to find, install and use, increasing reproducibility and (re)usability. Demonstration workflows implemented in Jupyter notebooks using the library will be presented and explained step by step (e.g. protein-ligand complex GROMACS MD setup). The first steps on how to build and run complex workflows in command-line will be explored.\n\n**Audience**\n\nThis session is aimed at people interested in:\n\n  * Starting with computational biomolecular simulations, and more specifically Molecular Dynamics simulations.\n  * Building computational biomolecular simulations workflows, ensuring reproducibility.\n  * No expertise in Molecular Dynamics is needed to attend the training, although some knowledge and familiarity with this method is recommended to properly follow the course. Minimum Linux skills are also required.\n  * This is an interactive session that is presented remotely using GoToTraining\n\n\n\n**Learning outcomes**\n\nAt the end of this session you will be able to:\n\n  * Interactively work with computational biomolecular simulation demonstration workflows built using the BioExcel building blocks library in Jupyter Notebooks sessions: change input structure, modify parameters, add/remove steps, etc.\n  * Write a new computational biomolecular simulation workflow using the BioExcel building blocks library from scratch.\n  * Launch computational biomolecular simulation workflows built using the BioExcel building blocks library in a command-line interface.", "eventAttendanceMode": "https://schema.org/OnlineEventAttendanceMode", "eventStatus": "https://schema.org/EventScheduled", "image": {"@type": "ImageObject", "representativeOfPage": "True", "url": "images/FocusCoE_placeholder.webp", "width": 720, "height": 231}, "doorTime": "2019-12-09T09:00:00+0100", "startDate": "2019-12-09T09:00:00+0100", "endDate": "2019-12-12T17:00:00+0100", "@id": "https://hpc-portal.eu/node/1473", "isAccessibleForFree": "True", "location": {"@type": "VirtualLocation", "url": "https://bioexcel.eu/events/computational-biomolecular-simulation-workflows-with-bioexcel-building-blocks/", "geo": {"@type": "GeoCoordinates", "latitude": "52.077917351168", "longitude": "0.18712399999997"}}, "language": ["English"], "sector": ["Research and Academia", "Industry"], "country": ["United Kingdom"], "projects": ["BioExcel-2"], "level": ["Beginner", "Intermediate"], "online": ["Live (synchronous)"], "html_description": "<p><strong>Overview</strong></p> <p>Are you interested in computational biomolecular simulation methods such as Molecular Dynamics simulations, but scared to make the first step? What if you could start smoothly using interactive, graphical user interfaces like Jupyter Notebooks? What if you could easily build pipelines chaining different programs using a single, interoperable library with a unique syntax?</p> <p>Join the online training session where we will introduce the <a href=\"https://www.nature.com/articles/s41597-019-0177-4\">BioExcel building blocks</a>, a fully interoperable software library comprising a collection of Python wrappers on top of biomolecular simulation tools such as GROMACS, Ambertools, Openbabel or ACPYPE. The philosophy behind its design, following best practices and FAIR principles for software development makes it easy to find, install and use, increasing reproducibility and (re)usability. Demonstration workflows implemented in Jupyter notebooks using the library will be presented and explained step by step (e.g. protein-ligand complex GROMACS MD setup). The first steps on how to build and run complex workflows in command-line will be explored.</p> <p><strong>Audience</strong></p> <p>This session is aimed at people interested in:</p> <ul> <li>Starting with computational biomolecular simulations, and more specifically Molecular Dynamics simulations.</li> <li>Building computational biomolecular simulations workflows, ensuring reproducibility.</li> <li>No expertise in Molecular Dynamics is needed to attend the training, although some knowledge and familiarity with this method is recommended to properly follow the course. Minimum Linux skills are also required.</li> <li>This is an interactive session that is presented remotely using GoToTraining</li> </ul> <p><strong>Learning outcomes</strong></p> <p>At the end of this session you will be able to:</p> <ul> <li>Interactively work with computational biomolecular simulation demonstration workflows built using the BioExcel building blocks library in Jupyter Notebooks sessions: change input structure, modify parameters, add/remove steps, etc.</li> <li>Write a new computational biomolecular simulation workflow using the BioExcel building blocks library from scratch.</li> <li>Launch computational biomolecular simulation workflows built using the BioExcel building blocks library in a command-line interface.</li> </ul>", "markdown_description": "**Overview**\n\nAre you interested in computational biomolecular simulation methods such as Molecular Dynamics simulations, but scared to make the first step? What if you could start smoothly using interactive, graphical user interfaces like Jupyter Notebooks? What if you could easily build pipelines chaining different programs using a single, interoperable library with a unique syntax?\n\nJoin the online training session where we will introduce the [BioExcel building blocks](https://www.nature.com/articles/s41597-019-0177-4), a fully interoperable software library comprising a collection of Python wrappers on top of biomolecular simulation tools such as GROMACS, Ambertools, Openbabel or ACPYPE. The philosophy behind its design, following best practices and FAIR principles for software development makes it easy to find, install and use, increasing reproducibility and (re)usability. Demonstration workflows implemented in Jupyter notebooks using the library will be presented and explained step by step (e.g. protein-ligand complex GROMACS MD setup). The first steps on how to build and run complex workflows in command-line will be explored.\n\n**Audience**\n\nThis session is aimed at people interested in:\n\n  * Starting with computational biomolecular simulations, and more specifically Molecular Dynamics simulations.\n  * Building computational biomolecular simulations workflows, ensuring reproducibility.\n  * No expertise in Molecular Dynamics is needed to attend the training, although some knowledge and familiarity with this method is recommended to properly follow the course. Minimum Linux skills are also required.\n  * This is an interactive session that is presented remotely using GoToTraining\n\n\n\n**Learning outcomes**\n\nAt the end of this session you will be able to:\n\n  * Interactively work with computational biomolecular simulation demonstration workflows built using the BioExcel building blocks library in Jupyter Notebooks sessions: change input structure, modify parameters, add/remove steps, etc.\n  * Write a new computational biomolecular simulation workflow using the BioExcel building blocks library from scratch.\n  * Launch computational biomolecular simulation workflows built using the BioExcel building blocks library in a command-line interface.", "summary": "**Overview**\n\nAre you interested in computational biomolecular simulation methods such as Molecular Dynamics simulations, but scared..."}]}, {"@context": "https://schema.org", "@graph": [{"@type": "Event", "name": "HPC and natural hazards: modelling tsunamis and volcanic plumes using European flagship codes", "url": "https://events.prace-ri.eu/event/906/", "description": "**Objectives**\n\nThis course focuses on modelling two of the highest impact natural hazards, volcanic eruptions and tsunamis. The objective is to give a succinct theoretical overview and then introduce students on the use of different HPC flagship codes included in the Center of Excellence for Exascale in Solid Earth (ChEESE). ASHEE is a volcanic plume and PDC simulator based on a multiphase fluid dynamic model conceived for compressible mixtures composed of gaseous components and solid particle phases. FALL3D is a Eulerian model for the atmospheric transport and ground deposition of volcanic tephra (ash) used in operational volcanic ash dispersal forecasts routinely used to prevent aircraft encounters with volcanic ash clouds and to perform re-routings avoiding contaminated airspace areas. T-HySEA solves the 2D shallow water equations on hydrostatic and dispersive versions. Based on a high-order Finite Volume (FV) discretisation (hydrostatic) with Finite Differences (FD) for the dispersive version on two-way structured nested meshes in spherical coordinates. Together with hands-on sessions, the course will also tackle post-process strategies based on python. In recent years, the Python programming language has become one of the most popular choice for geoscientists. Python is a modern, interpreted, object-oriented, open-source language easy to learn, easy to read, and fast to write. The proliferation of multiple open-source projects with libraries available every day, have facilitated a rapid scientific development in the geoscience community. In addition, the modern data structures and object-oriented nature of the language along with an elegant syntax, enable Earth scientists to write more robust and less buggy code.\n\n**Requirements**\n\n-At least University degree in progress on Earth Sciences, Computer Sciences or related area.  \n-Basic knowledge of LINUX  \n-Knowledge of C, FORTRAN, MPI or openMP is recommended  \n-Knowledge of Earth Sciences data formats is recommended (grib, netcdf, hdf,...)  \n-Basic knowledge of python\n\n**Learning Outcomes**\n\nParticipants will learn and gain experience in installing SE codes and related utilities and libraries, running numerical simulations, monitoring the execution of supercomputing jobs, analyzing and visualizing model results.", "eventAttendanceMode": "https://schema.org/OfflineEventAttendanceMode", "eventStatus": "https://schema.org/EventScheduled", "image": {"@type": "ImageObject", "representativeOfPage": "True", "url": "images/FocusCoE_placeholder.webp", "width": 720, "height": 231}, "doorTime": "2019-12-02T09:00:00+0100", "startDate": "2019-12-02T09:00:00+0100", "endDate": "2019-12-05T17:00:00+0100", "@id": "https://hpc-portal.eu/node/1482", "isAccessibleForFree": "True", "location": {"@type": "VirtualLocation", "url": "https://events.prace-ri.eu/event/906/", "geo": {"@type": "GeoCoordinates", "latitude": "41.389776101375", "longitude": "2.1160718"}}, "language": ["English"], "sector": ["Research and Academia", "Industry", "Public Sector"], "country": ["Spain"], "projects": ["PRACE", "ChEESE"], "level": ["Intermediate", "Advanced"], "html_description": "<p><strong>Objectives</strong></p> <p>This course focuses on modelling two of the highest impact natural hazards, volcanic eruptions and tsunamis. The objective is to give a succinct theoretical overview and then introduce students on the use of different HPC flagship codes included in the Center of Excellence for Exascale in Solid Earth (ChEESE). ASHEE is a volcanic plume and PDC simulator based on a multiphase fluid dynamic model conceived for compressible mixtures composed of gaseous components and solid particle phases. FALL3D is a Eulerian model for the atmospheric transport and ground deposition of volcanic tephra (ash) used in operational volcanic ash dispersal forecasts routinely used to prevent aircraft encounters with volcanic ash clouds and to perform re-routings avoiding contaminated airspace areas. T-HySEA solves the 2D shallow water equations on hydrostatic and dispersive versions. Based on a high-order Finite Volume (FV) discretisation (hydrostatic) with Finite Differences (FD) for the dispersive version on two-way structured nested meshes in spherical coordinates. Together with hands-on sessions, the course will also tackle post-process strategies based on python. In recent years, the Python programming language has become one of the most popular choice for geoscientists. Python is a modern, interpreted, object-oriented, open-source language easy to learn, easy to read, and fast to write. The proliferation of multiple open-source projects with libraries available every day, have facilitated a rapid scientific development in the geoscience community. In addition, the modern data structures and object-oriented nature of the language along with an elegant syntax, enable Earth scientists to write more robust and less buggy code.</p> <p><strong>Requirements</strong></p> <p>-At least University degree in progress on Earth Sciences, Computer Sciences or related area.<br> -Basic knowledge of LINUX<br> -Knowledge of C, FORTRAN, MPI or openMP is recommended<br> -Knowledge of Earth Sciences data formats is recommended (grib, netcdf, hdf,...)<br> -Basic knowledge of python</p> <p><strong>Learning Outcomes</strong></p> <p>Participants will learn and gain experience in installing SE codes and related utilities and libraries, running numerical simulations, monitoring the execution of supercomputing jobs, analyzing and visualizing model results.</p>", "markdown_description": "**Objectives**\n\nThis course focuses on modelling two of the highest impact natural hazards, volcanic eruptions and tsunamis. The objective is to give a succinct theoretical overview and then introduce students on the use of different HPC flagship codes included in the Center of Excellence for Exascale in Solid Earth (ChEESE). ASHEE is a volcanic plume and PDC simulator based on a multiphase fluid dynamic model conceived for compressible mixtures composed of gaseous components and solid particle phases. FALL3D is a Eulerian model for the atmospheric transport and ground deposition of volcanic tephra (ash) used in operational volcanic ash dispersal forecasts routinely used to prevent aircraft encounters with volcanic ash clouds and to perform re-routings avoiding contaminated airspace areas. T-HySEA solves the 2D shallow water equations on hydrostatic and dispersive versions. Based on a high-order Finite Volume (FV) discretisation (hydrostatic) with Finite Differences (FD) for the dispersive version on two-way structured nested meshes in spherical coordinates. Together with hands-on sessions, the course will also tackle post-process strategies based on python. In recent years, the Python programming language has become one of the most popular choice for geoscientists. Python is a modern, interpreted, object-oriented, open-source language easy to learn, easy to read, and fast to write. The proliferation of multiple open-source projects with libraries available every day, have facilitated a rapid scientific development in the geoscience community. In addition, the modern data structures and object-oriented nature of the language along with an elegant syntax, enable Earth scientists to write more robust and less buggy code.\n\n**Requirements**\n\n-At least University degree in progress on Earth Sciences, Computer Sciences or related area.  \n-Basic knowledge of LINUX  \n-Knowledge of C, FORTRAN, MPI or openMP is recommended  \n-Knowledge of Earth Sciences data formats is recommended (grib, netcdf, hdf,...)  \n-Basic knowledge of python\n\n**Learning Outcomes**\n\nParticipants will learn and gain experience in installing SE codes and related utilities and libraries, running numerical simulations, monitoring the execution of supercomputing jobs, analyzing and visualizing model results.", "summary": "**Objectives**\n\nThis course focuses on modelling two of the highest impact natural hazards, volcanic eruptions and tsunamis. The..."}]}]